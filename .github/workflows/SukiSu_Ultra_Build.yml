name: Build Kernel with SukiSU patches

on:
  workflow_dispatch:
    inputs:
      KERNEL_REPO:
        description: 'Репозиторий ядра'
        required: true
        default: 'Biohazardousrom/Mad-Kali-MaxHunter-Pantah'
      KERNEL_BRANCH:
        description: 'Ветка ядра'
        required: true
        default: 'Android-15-vic'
      DEVICE:
        description: 'Устройство'
        required: true
        default: 'pantah'
      DEFCONFIG:
        description: 'Название defconfig'
        required: true
        default: 'cloudripper_gki_defconfig'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set build date
        run: echo "BUILD_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV

      - name: Checkout kernel source
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.KERNEL_REPO }}
          ref: ${{ github.event.inputs.KERNEL_BRANCH }}
          fetch-depth: 0

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib \
          gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev \
          lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev \
          libwxgtk3.0-gtk3-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool \
          squashfs-tools xsltproc zip zlib1g-dev python2 python2-dev python3 \
          clang llvm lld libclang-dev

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          max-size: 5G

      - name: Clone SukiSU_patch repository
        run: |
          echo "::group::Cloning SukiSU_patch"
          git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git sukisu-patches
          echo "Клонирован репозиторий SukiSU_patch"
          ls -la sukisu-patches
          echo "::endgroup::"

      - name: Clone SukiSU_KernelPatch_patch repository
        run: |
          echo "::group::Cloning SukiSU_KernelPatch_patch"
          git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch.git kernelpatch-patches
          echo "Клонирован репозиторий SukiSU_KernelPatch_patch"
          ls -la kernelpatch-patches
          echo "::endgroup::"

      - name: Apply SukiSU_patch patches
        run: |
          echo "::group::Applying SukiSU patches"
          cd sukisu-patches
          # Патчи в корневой директории
          for patch in *.patch; do
            if [ -f "$patch" ]; then
              echo "⚙️ Applying SukiSU patch: $patch"
              git apply --directory=.. "$patch" || echo "⚠️ Failed to apply $patch, continuing anyway"
            fi
          done
          
          # Патчи в подпапках
          find . -type f -name "*.patch" -not -path "./*.patch" | while read patch; do
            echo "⚙️ Applying SukiSU patch from subdirectory: $patch"
            git apply --directory=.. "$patch" || echo "⚠️ Failed to apply $patch, continuing anyway"
          done
          
          cd ..
          echo "::endgroup::"

      - name: Apply SukiSU_KernelPatch_patch patches
        run: |
          echo "::group::Applying KernelPatch patches"
          cd kernelpatch-patches
          # Патчи в корневой директории
          for patch in *.patch; do
            if [ -f "$patch" ]; then
              echo "⚙️ Applying KernelPatch patch: $patch"
              git apply --directory=.. "$patch" || echo "⚠️ Failed to apply $patch, continuing anyway"
            fi
          done
          
          # Патчи в подпапках
          find . -type f -name "*.patch" -not -path "./*.patch" | while read patch; do
            echo "⚙️ Applying KernelPatch patch from subdirectory: $patch"
            git apply --directory=.. "$patch" || echo "⚠️ Failed to apply $patch, continuing anyway"
          done
          
          cd ..
          echo "::endgroup::"

      - name: Setup kernel build
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          export ARCH=arm64
          export SUBARCH=arm64
          export CLANG_PATH=/usr/bin/clang
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-

      - name: Build kernel
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          export ARCH=arm64
          export SUBARCH=arm64
          
          echo "::group::Kernel configuration"
          make ${{ github.event.inputs.DEFCONFIG }}
          echo "::endgroup::"
          
          echo "::group::Kernel compilation"
          make -j$(nproc --all) CC=clang LLVM=1
          echo "::endgroup::"

      - name: Clone AnyKernel3
        if: success()
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git

      - name: Prepare AnyKernel3 package
        run: |
          echo "::group::Preparing AnyKernel3 package"
          # Очистить стандартные файлы AnyKernel3
          rm -rf AnyKernel3/.git*
          rm -f AnyKernel3/README.md
          
          # Копировать собранные файлы
          cp arch/arm64/boot/Image AnyKernel3/ || echo "⚠️ Image не найден"
          [ -f arch/arm64/boot/dtb ] && cp arch/arm64/boot/dtb AnyKernel3/ || echo "⚠️ dtb не найден"
          [ -f arch/arm64/boot/dtbo.img ] && cp arch/arm64/boot/dtbo.img AnyKernel3/ || echo "⚠️ dtbo.img не найден"
          
          # Конфигурация для устройства
          cat > AnyKernel3/anykernel.sh << EOF
          # AnyKernel3 Ramdisk Mod Script
          properties() { 
          kernel.string=SukiSU Patched Kernel by victor20010
          do.devicecheck=1
          do.modules=0
          do.systemless=1
          do.cleanup=1
          do.cleanuponabort=0
          device.name1=${{ github.event.inputs.DEVICE }}
          supported.versions=11 - 14
          supported.patchlevels=
          }
          
          block=/dev/block/bootdevice/by-name/boot;
          is_slot_device=1;
          ramdisk_compression=auto;
          
          . tools/ak3-core.sh;
          
          # Начало патчинга
          ui_print "- Installing SukiSU Patched Kernel...";
          
          # Конец сценария
          EOF
          
          # Создать файл с информацией о сборке
          echo "# SukiSU Patched Kernel" > AnyKernel3/README.md
          echo "Build date: $(date +%Y-%m-%d)" >> AnyKernel3/README.md
          echo "Build by: victor20010" >> AnyKernel3/README.md
          echo "Device: ${{ github.event.inputs.DEVICE }}" >> AnyKernel3/README.md
          echo "Kernel repo: ${{ github.event.inputs.KERNEL_REPO }}" >> AnyKernel3/README.md
          echo "Branch: ${{ github.event.inputs.KERNEL_BRANCH }}" >> AnyKernel3/README.md
          echo "SukiSU version: $(date +%Y%m%d)" >> AnyKernel3/README.md
          
          # Создание архива
          cd AnyKernel3
          zip -r9 ../SukiSU-Kernel-${{ github.event.inputs.DEVICE }}-${{ env.BUILD_DATE }}.zip *
          echo "::endgroup::"

      - name: Upload kernel zip
        uses: actions/upload-artifact@v3
        with:
          name: SukiSU-Kernel-${{ github.event.inputs.DEVICE }}
          path: SukiSU-Kernel-${{ github.event.inputs.DEVICE }}-${{ env.BUILD_DATE }}.zip
